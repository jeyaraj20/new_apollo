{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAllQBankSubCategory(payload) {\n    let url = `${apiUrl}/subcategory/status/Y?_start=${payload._start}&_limit=${payload._limit}&isNewAdmin=true`;\n\n    if (payload && payload.search) {\n      url += `&search=${payload.search}`;\n    }\n\n    if (payload && payload.searchMainCat) {\n      url += `&searchMainCat=${payload.searchMainCat}`;\n    }\n\n    const reponse = await Repository.get(url).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveQBankSubCategory(payload) {\n    let url = `${apiUrl}/subcategory/status/N?_start=${payload._start}&_limit=${payload._limit}&isNewAdmin=true`;\n\n    if (payload && payload.search) {\n      url += `&search=${payload.search}`;\n    }\n\n    if (payload && payload.searchMainCat) {\n      url += `&searchMainCat=${payload.searchMainCat}`;\n    }\n\n    const reponse = await Repository.get(url).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveQBankSubCategory(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/subcategory/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editQBankSubCategory(categoryId, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/subcategory/pid/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(data) {\n    const reponse = await Repository.put(`${apiUrl}/subcategory/inactive`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async deleteCategory(data) {\n    const reponse = await Repository.delete(`${apiUrl}/subcategory/`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: data\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    ;\n    return reponse;\n  }\n\n  async changePosition(data) {\n    const reponse = await Repository.put(`${apiUrl}/subcategory/position`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getSubCategoryQuestionForPDF(data) {\n    const reponse = await Repository.post(`${apiUrl}/subcategory/get/Questionspdfreport`, data, {\n      responseType: 'arraybuffer',\n      headers: {\n        'Accept': 'application/pdf'\n      }\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/QBankSubCategoryRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getAllQBankSubCategory","payload","url","_start","_limit","search","searchMainCat","reponse","get","then","response","data","catch","error","JSON","stringify","getInactiveQBankSubCategory","saveQBankSubCategory","formdata","post","editQBankSubCategory","categoryId","put","inactiveCategory","deleteCategory","delete","headers","changePosition","getSubCategoryQuestionForPDF","responseType"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,MAArB,QAAmC,cAAnC;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAE2B,QAAtBC,sBAAsB,CAACC,OAAD,EAAU;AAClC,QAAIC,GAAG,GAAI,GAAEN,MAAO,gCAA+BK,OAAO,CAACE,MAAO,WAAUF,OAAO,CAACG,MAAO,kBAA3F;;AACA,QAAIH,OAAO,IAAIA,OAAO,CAACI,MAAvB,EAA+B;AAC3BH,MAAAA,GAAG,IAAK,WAAUD,OAAO,CAACI,MAAO,EAAjC;AACH;;AACD,QAAIJ,OAAO,IAAIA,OAAO,CAACK,aAAvB,EAAsC;AAClCJ,MAAAA,GAAG,IAAK,kBAAiBD,OAAO,CAACK,aAAc,EAA/C;AACH;;AACD,UAAMC,OAAO,GAAG,MAAMZ,UAAU,CAACa,GAAX,CAAeN,GAAf,EACjBO,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEgC,QAA3BS,2BAA2B,CAACf,OAAD,EAAU;AACvC,QAAIC,GAAG,GAAI,GAAEN,MAAO,gCAA+BK,OAAO,CAACE,MAAO,WAAUF,OAAO,CAACG,MAAO,kBAA3F;;AACA,QAAIH,OAAO,IAAIA,OAAO,CAACI,MAAvB,EAA+B;AAC3BH,MAAAA,GAAG,IAAK,WAAUD,OAAO,CAACI,MAAO,EAAjC;AACH;;AACD,QAAIJ,OAAO,IAAIA,OAAO,CAACK,aAAvB,EAAsC;AAClCJ,MAAAA,GAAG,IAAK,kBAAiBD,OAAO,CAACK,aAAc,EAA/C;AACH;;AACD,UAAMC,OAAO,GAAG,MAAMZ,UAAU,CAACa,GAAX,CAAeN,GAAf,EACjBO,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEyB,QAApBU,oBAAoB,CAACC,QAAD,EAAW;AACjC,UAAMX,OAAO,GAAG,MAAMZ,UAAU,CAACwB,IAAX,CAAiB,GAAEvB,MAAO,eAA1B,EAA0CsB,QAA1C,EACjBT,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEyB,QAApBa,oBAAoB,CAACC,UAAD,EAAaH,QAAb,EAAuB;AAC7C,UAAMX,OAAO,GAAG,MAAMZ,UAAU,CAAC2B,GAAX,CAAgB,GAAE1B,MAAO,oBAAmByB,UAAW,EAAvD,EAA0DH,QAA1D,EACjBT,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEqB,QAAhBgB,gBAAgB,CAACZ,IAAD,EAAO;AACzB,UAAMJ,OAAO,GAAG,MAAMZ,UAAU,CAAC2B,GAAX,CAAgB,GAAE1B,MAAO,uBAAzB,EAAiDe,IAAjD,EACjBF,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEmB,QAAdiB,cAAc,CAACb,IAAD,EAAO;AACvB,UAAMJ,OAAO,GAAG,MAAMZ,UAAU,CAAC8B,MAAX,CAAmB,GAAE7B,MAAO,eAA5B,EAA4C;AAC9D8B,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OADqD;AAI9Df,MAAAA,IAAI,EAAEA;AAJwD,KAA5C,EAKnBF,IALmB,CAKdC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPqB,EAOnBC,KAPmB,CAObC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAPQ,CAAtB;AAOsD;AACtD,WAAON,OAAP;AACH;;AAEmB,QAAdoB,cAAc,CAAChB,IAAD,EAAO;AACvB,UAAMJ,OAAO,GAAG,MAAMZ,UAAU,CAAC2B,GAAX,CAAgB,GAAE1B,MAAO,uBAAzB,EAAiDe,IAAjD,EACjBF,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEiC,QAA5BqB,4BAA4B,CAACjB,IAAD,EAAO;AACrC,UAAMJ,OAAO,GAAG,MAAMZ,UAAU,CAACwB,IAAX,CAAiB,GAAEvB,MAAO,qCAA1B,EAAgEe,IAAhE,EAAsE;AACxFkB,MAAAA,YAAY,EAAE,aAD0E;AAExFH,MAAAA,OAAO,EAAE;AACL,kBAAU;AADL;AAF+E,KAAtE,EAKnBjB,IALmB,CAKdC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAPqB,EAOnBC,KAPmB,CAObC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAPQ,CAAtB;AAQA,WAAON,OAAP;AACH;;AA/FgB;;AAmGrB,eAAe,IAAIV,cAAJ,EAAf","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getAllQBankSubCategory(payload) {\r\n        let url = `${apiUrl}/subcategory/status/Y?_start=${payload._start}&_limit=${payload._limit}&isNewAdmin=true`;\r\n        if (payload && payload.search) {\r\n            url += `&search=${payload.search}`\r\n        }\r\n        if (payload && payload.searchMainCat) {\r\n            url += `&searchMainCat=${payload.searchMainCat}`\r\n        }\r\n        const reponse = await Repository.get(url)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveQBankSubCategory(payload) {\r\n        let url = `${apiUrl}/subcategory/status/N?_start=${payload._start}&_limit=${payload._limit}&isNewAdmin=true`;\r\n        if (payload && payload.search) {\r\n            url += `&search=${payload.search}`\r\n        }\r\n        if (payload && payload.searchMainCat) {\r\n            url += `&searchMainCat=${payload.searchMainCat}`\r\n        }\r\n        const reponse = await Repository.get(url)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async saveQBankSubCategory(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/subcategory/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async editQBankSubCategory(categoryId, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/subcategory/pid/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async inactiveCategory(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/subcategory/inactive`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async deleteCategory(data) {\r\n        const reponse = await Repository.delete(`${apiUrl}/subcategory/`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: data\r\n        }).then(response => {\r\n            return response.data;\r\n        }).catch(error => ({ error: JSON.stringify(error) }));;\r\n        return reponse;\r\n    }\r\n\r\n    async changePosition(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/subcategory/position`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getSubCategoryQuestionForPDF(data) {\r\n        const reponse = await Repository.post(`${apiUrl}/subcategory/get/Questionspdfreport`, data, {\r\n            responseType: 'arraybuffer',\r\n            headers: {\r\n                'Accept': 'application/pdf'\r\n            }\r\n        }).then(response => {\r\n            return response.data;\r\n        }).catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}