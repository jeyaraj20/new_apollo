{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\nimport axios from \"axios\";\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAllStudent(payload) {\n    const reponse = await Repository.get(`${apiUrl}/student/status/Y?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveStudent(payload) {\n    const reponse = await Repository.get(`${apiUrl}/student/status/N?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveStudent(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/student/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async updateStudent(categoryId, formdata) {\n    console.log(\"12345689\");\n    const reponse = await Repository.put(`${apiUrl}/student/id/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async changeStatus(data) {\n    const reponse = await Repository.put(`${apiUrl}/student/status`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async deleteStudent(data) {\n    const reponse = await Repository.put(`${apiUrl}/student/status`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getStudentsCount(payload) {\n    const reponse = await Repository.get(`${apiUrl}/student/stud-count/${stud_status}?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getStudentById(payload) {\n    const reponse = await Repository.get(`${apiUrl}/student/id/${stud_id}?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async downloadStudentReport(status, startDate, endDate) {\n    let url = `${apiUrl}/student/download/${status}`;\n\n    if (startDate && endDate) {\n      url += `?startDate=${startDate}&endDate=${endDate}`;\n    } else if (startDate) {\n      url += `?startDate=${startDate}`;\n    } else if (endDate) {\n      url += `?endDate=${endDate}`;\n    }\n\n    const reponse = axios({\n      method: \"GET\",\n      url: url,\n      responseType: 'blob'\n    }).then(response => {\n      return response.data;\n    }).catch(error => {\n      return error;\n    });\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/StudentRepository.js"],"names":["Repository","apiUrl","axios","AuthRepository","constructor","callback","getAllStudent","payload","reponse","get","_start","_limit","then","response","data","catch","error","JSON","stringify","getInactiveStudent","saveStudent","formdata","post","updateStudent","categoryId","console","log","put","changeStatus","deleteStudent","getStudentsCount","stud_status","getStudentById","stud_id","downloadStudentReport","status","startDate","endDate","url","method","responseType"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\nimport axios from \"axios\";\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n    async getAllStudent(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/student/status/Y?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveStudent(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/student/status/N?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async saveStudent(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/student/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async updateStudent(categoryId, formdata) {\r\n        console.log(\"12345689\")\r\n        const reponse = await Repository.put(`${apiUrl}/student/id/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async changeStatus(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/student/status`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async deleteStudent(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/student/status`, data)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .catch(error => ({ error: JSON.stringify(error) }));\r\n    return reponse;\r\n    }\r\n    async getStudentsCount(payload) {\r\n    const reponse = await Repository.get(`${apiUrl}/student/stud-count/${stud_status}?_start=${payload._start}&_limit=${payload._limit}`)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .catch(error => ({ error: JSON.stringify(error) }));\r\n    return reponse;\r\n}\r\n\r\nasync getStudentById(payload) {\r\n    const reponse = await Repository.get(`${apiUrl}/student/id/${stud_id}?_start=${payload._start}&_limit=${payload._limit}`)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .catch(error => ({ error: JSON.stringify(error) }));\r\n    return reponse;\r\n}\r\n async  downloadStudentReport(status, startDate, endDate) {\r\n    let url = `${apiUrl}/student/download/${status}`;\r\n    if (startDate && endDate) {\r\n        url += `?startDate=${startDate}&endDate=${endDate}`\r\n    } else if (startDate) {\r\n        url += `?startDate=${startDate}`\r\n    } else if (endDate) {\r\n        url += `?endDate=${endDate}`\r\n    }\r\n    const reponse = axios({\r\n        method: \"GET\",\r\n        url: url,\r\n        responseType: 'blob',\r\n    }).then(response => {\r\n        return response.data;\r\n    }).catch(error => {\r\n        return error;\r\n    });\r\n    return reponse;\r\n}\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}