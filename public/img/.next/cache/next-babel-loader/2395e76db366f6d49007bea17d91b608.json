{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAllExampackage(payload) {\n    const reponse = await Repository.get(`${apiUrl}/exampackage/status/Y?_start=${payload._start}&_limit=${payload._limit}&search=${payload.search}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveExampackage(payload) {\n    const reponse = await Repository.get(`${apiUrl}/exampackage/status/N?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveExampackage(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/exampackage/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editExampackage(categoryId, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/exampackage/Id/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(data) {\n    const reponse = await Repository.put(`${apiUrl}/exampackage/status`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getExamDurationById(categoryId) {\n    const reponse = await Repository.get(`${apiUrl}/exampackage/examduration/${categoryId}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/ExampackageRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getAllExampackage","payload","reponse","get","_start","_limit","search","then","response","data","catch","error","JSON","stringify","getInactiveExampackage","saveExampackage","formdata","post","editExampackage","categoryId","put","inactiveCategory","getExamDurationById"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getAllExampackage(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/exampackage/status/Y?_start=${payload._start}&_limit=${payload._limit}&search=${payload.search}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveExampackage(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/exampackage/status/N?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async saveExampackage(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/exampackage/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async editExampackage(categoryId, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/exampackage/Id/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async inactiveCategory(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/exampackage/status`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async getExamDurationById(categoryId) {\r\n        const reponse = await Repository.get(`${apiUrl}/exampackage/examduration/${categoryId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    \r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}