{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAdminMenuAll() {\n    const reponse = await Repository.get(`${apiUrl}/adminmenu/all`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getAdminUserMenu() {\n    const reponse = await Repository.get(`${apiUrl}/adminmenu/`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getAllOperators() {\n    const reponse = await Repository.get(`${apiUrl}/operator/getoperator/Y`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async changePassword(data) {\n    console.log(user, 'data'); //  if (user.user.type === \"S\")\n\n    const reponse = await Repository.put(`${apiUrl}/adminmenu/changepasswordsuperadmin`, data) // else\n    //     const reponse = await Repository.put(`${apiUrl}/adminmenu/changepasswordadminoperator`, data)\n    .then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/AdminRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getAdminMenuAll","reponse","get","then","response","data","catch","error","JSON","stringify","getAdminUserMenu","getAllOperators","changePassword","console","log","user","put"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,MAArB,QAAmC,cAAnC;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEoB,QAAfC,eAAe,GAAG;AACpB,UAAMC,OAAO,GAAG,MAAMN,UAAU,CAACO,GAAX,CAAgB,GAAEN,MAAO,gBAAzB,EACjBO,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEqB,QAAhBS,gBAAgB,GAAG;AACrB,UAAMT,OAAO,GAAG,MAAMN,UAAU,CAACO,GAAX,CAAgB,GAAEN,MAAO,aAAzB,EACjBO,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEoB,QAAfU,eAAe,GAAG;AACpB,UAAMV,OAAO,GAAG,MAAMN,UAAU,CAACO,GAAX,CAAgB,GAAEN,MAAO,yBAAzB,EACjBO,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAEmB,QAAdW,cAAc,CAACP,IAAD,EAAO;AACvBQ,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EAAiB,MAAjB,EADuB,CAEzB;;AACM,UAAMd,OAAO,GAAG,MAAMN,UAAU,CAACqB,GAAX,CAAgB,GAAEpB,MAAO,qCAAzB,EAA+DS,IAA/D,EAC1B;AACA;AAF0B,KAGzBF,IAHyB,CAGpBC,QAAQ,IAAI;AACN,aAAOA,QAAQ,CAACC,IAAhB;AACH,KALiB,EAMjBC,KANiB,CAMXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CANM,CAAtB;AAOJ,WAAON,OAAP;AACH;;AA3CgB;;AA8CrB,eAAe,IAAIJ,cAAJ,EAAf","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getAdminMenuAll() {\r\n        const reponse = await Repository.get(`${apiUrl}/adminmenu/all`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getAdminUserMenu() {\r\n        const reponse = await Repository.get(`${apiUrl}/adminmenu/`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getAllOperators() {\r\n        const reponse = await Repository.get(`${apiUrl}/operator/getoperator/Y`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async changePassword(data) {\r\n        console.log(user,'data')\r\n      //  if (user.user.type === \"S\")\r\n            const reponse = await Repository.put(`${apiUrl}/adminmenu/changepasswordsuperadmin`, data)\r\n        // else\r\n        //     const reponse = await Repository.put(`${apiUrl}/adminmenu/changepasswordadminoperator`, data)\r\n        .then(response => {\r\n                    return response.data;\r\n                })\r\n                .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}