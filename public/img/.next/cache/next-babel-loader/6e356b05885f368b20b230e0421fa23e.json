{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getActiveQuestionsSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getInactiveQuestionsSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { actionTypes, getActiveExamsSuccess, getInactiveExamsSuccess } from './action';\nimport ExaminationCalendarRepository from '../../repositories/ExaminationCalendarRepository';\n\nfunction getActiveQuestionsSaga(_ref) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getActiveQuestionsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(ExaminationCalendarRepository.getActiveExams, payload);\n\n        case 4:\n          data = _context.sent;\n          _context.next = 7;\n          return put(getActiveExamsSuccess(data));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(getActiveExamsSuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction getInactiveQuestionsSaga(_ref2) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getInactiveQuestionsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(ExaminationCalendarRepository.getInactiveExams, payload);\n\n        case 4:\n          data = _context2.sent;\n          _context2.next = 7;\n          return put(getInactiveExamsSuccess(data));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 13;\n          return put(getInactiveExamsSuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actionTypes.GET_ACTIVE_EXAM_REQUEST, getActiveQuestionsSaga)]);\n\n        case 2:\n          _context3.next = 4;\n          return all([takeEvery(actionTypes.GET_INACTIVE_EXAM_REQUEST, getInactiveQuestionsSaga)]);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/store/exams/saga.js"],"names":["getActiveQuestionsSaga","getInactiveQuestionsSaga","rootSaga","all","put","call","takeEvery","actionTypes","getActiveExamsSuccess","getInactiveExamsSuccess","ExaminationCalendarRepository","payload","getActiveExams","data","getInactiveExams","GET_ACTIVE_EXAM_REQUEST","GET_INACTIVE_EXAM_REQUEST"],"mappings":";;oDAMUA,sB;qDASAC,wB;qDAUeC,Q;;AAzBzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,WAAT,EAAsBC,qBAAtB,EAA6CC,uBAA7C,QAA4E,UAA5E;AAEA,OAAOC,6BAAP,MAA0C,kDAA1C;;AAEA,SAAUV,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCW,UAAAA,OAAnC,QAAmCA,OAAnC;AAAA;AAAA;AAEqB,iBAAMN,IAAI,CAACK,6BAA6B,CAACE,cAA/B,EAA+CD,OAA/C,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMT,GAAG,CAACI,qBAAqB,CAACK,IAAD,CAAtB,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMT,GAAG,CAACI,qBAAqB,CAAC,IAAD,CAAtB,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUP,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqCU,UAAAA,OAArC,SAAqCA,OAArC;AAAA;AAAA;AAEqB,iBAAMN,IAAI,CAACK,6BAA6B,CAACI,gBAA/B,EAAiDH,OAAjD,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMT,GAAG,CAACK,uBAAuB,CAACI,IAAD,CAAxB,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMT,GAAG,CAACK,uBAAuB,CAAC,IAAD,CAAxB,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUP,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACQ,uBAAb,EAAsCf,sBAAtC,CAAV,CAAD,CAAT;;AADW;AAAA;AAEX,iBAAMG,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACS,yBAAb,EAAwCf,wBAAxC,CAAV,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, call, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { actionTypes, getActiveExamsSuccess, getInactiveExamsSuccess } from './action';\r\n\r\nimport ExaminationCalendarRepository from '../../repositories/ExaminationCalendarRepository';\r\n\r\nfunction* getActiveQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(ExaminationCalendarRepository.getActiveExams, payload);\r\n        yield put(getActiveExamsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getActiveExamsSuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getInactiveQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(ExaminationCalendarRepository.getInactiveExams, payload);\r\n        yield put(getInactiveExamsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getInactiveExamsSuccess(null));\r\n    }\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([takeEvery(actionTypes.GET_ACTIVE_EXAM_REQUEST, getActiveQuestionsSaga)]);\r\n    yield all([takeEvery(actionTypes.GET_INACTIVE_EXAM_REQUEST, getInactiveQuestionsSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}