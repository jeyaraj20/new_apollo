{"ast":null,"code":"import { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { actionTypes, getActiveQuestionsSuccess, getInactiveQuestionsSuccess, getWaitingQuestionsSuccess } from './action';\nimport QuestionRepository from '../../repositories/QuestionRepository';\n\nfunction* getActiveQuestionsSaga({\n  payload\n}) {\n  try {\n    const data = yield call(QuestionRepository.getActiveQuestions, payload);\n    yield put(getActiveQuestionsSuccess(data));\n  } catch (err) {\n    yield put(getActiveQuestionsSuccess(null));\n  }\n}\n\nfunction* getInactiveQuestionsSaga({\n  payload\n}) {\n  try {\n    const data = yield call(QuestionRepository.getInactiveQuestions, payload);\n    yield put(getInactiveQuestionsSuccess(data));\n  } catch (err) {\n    yield put(getInactiveQuestionsSuccess(null));\n  }\n}\n\nfunction* getWaitingQuestionsSaga({\n  payload\n}) {\n  try {\n    const data = yield call(QuestionRepository.getWaitingQuestions, payload);\n    yield put(getWaitingQuestionsSuccess(data));\n  } catch (err) {\n    yield put(getWaitingQuestionsSuccess(null));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_ACTIVE_QUESTIONS_REQUEST, getActiveQuestionsSaga)]);\n  yield all([takeEvery(actionTypes.GET_INACTIVE_QUESTIONS_REQUEST, getInactiveQuestionsSaga)]);\n  yield all([takeEvery(actionTypes.GET_WAITING_QUESTIONS_REQUEST, getWaitingQuestionsSaga)]);\n}","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/store/questions/saga.js"],"names":["all","put","call","takeEvery","actionTypes","getActiveQuestionsSuccess","getInactiveQuestionsSuccess","getWaitingQuestionsSuccess","QuestionRepository","getActiveQuestionsSaga","payload","data","getActiveQuestions","err","getInactiveQuestionsSaga","getInactiveQuestions","getWaitingQuestionsSaga","getWaitingQuestions","rootSaga","GET_ACTIVE_QUESTIONS_REQUEST","GET_INACTIVE_QUESTIONS_REQUEST","GET_WAITING_QUESTIONS_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,WAAT,EAAsBC,yBAAtB,EAAiDC,2BAAjD,EAA8EC,0BAA9E,QAAgH,UAAhH;AAEA,OAAOC,kBAAP,MAA+B,uCAA/B;;AAEA,UAAUC,sBAAV,CAAiC;AAAEC,EAAAA;AAAF,CAAjC,EAA8C;AAC1C,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACM,kBAAkB,CAACI,kBAApB,EAAwCF,OAAxC,CAAvB;AACA,UAAMT,GAAG,CAACI,yBAAyB,CAACM,IAAD,CAA1B,CAAT;AACH,GAHD,CAGE,OAAOE,GAAP,EAAY;AACV,UAAMZ,GAAG,CAACI,yBAAyB,CAAC,IAAD,CAA1B,CAAT;AACH;AACJ;;AAED,UAAUS,wBAAV,CAAmC;AAAEJ,EAAAA;AAAF,CAAnC,EAAgD;AAC5C,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACM,kBAAkB,CAACO,oBAApB,EAA0CL,OAA1C,CAAvB;AACA,UAAMT,GAAG,CAACK,2BAA2B,CAACK,IAAD,CAA5B,CAAT;AACH,GAHD,CAGE,OAAOE,GAAP,EAAY;AACV,UAAMZ,GAAG,CAACK,2BAA2B,CAAC,IAAD,CAA5B,CAAT;AACH;AACJ;;AAED,UAAUU,uBAAV,CAAkC;AAAEN,EAAAA;AAAF,CAAlC,EAA+C;AAC3C,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACM,kBAAkB,CAACS,mBAApB,EAAyCP,OAAzC,CAAvB;AACA,UAAMT,GAAG,CAACM,0BAA0B,CAACI,IAAD,CAA3B,CAAT;AACH,GAHD,CAGE,OAAOE,GAAP,EAAY;AACV,UAAMZ,GAAG,CAACM,0BAA0B,CAAC,IAAD,CAA3B,CAAT;AACH;AACJ;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACe,4BAAb,EAA2CV,sBAA3C,CAAV,CAAD,CAAT;AACA,QAAMT,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACgB,8BAAb,EAA6CN,wBAA7C,CAAV,CAAD,CAAT;AACA,QAAMd,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACiB,6BAAb,EAA4CL,uBAA5C,CAAV,CAAD,CAAT;AACH","sourcesContent":["import { all, put, call, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { actionTypes, getActiveQuestionsSuccess, getInactiveQuestionsSuccess, getWaitingQuestionsSuccess } from './action';\r\n\r\nimport QuestionRepository from '../../repositories/QuestionRepository';\r\n\r\nfunction* getActiveQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(QuestionRepository.getActiveQuestions, payload);\r\n        yield put(getActiveQuestionsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getActiveQuestionsSuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getInactiveQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(QuestionRepository.getInactiveQuestions, payload);\r\n        yield put(getInactiveQuestionsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getInactiveQuestionsSuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getWaitingQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(QuestionRepository.getWaitingQuestions, payload);\r\n        yield put(getWaitingQuestionsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getWaitingQuestionsSuccess(null));\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([takeEvery(actionTypes.GET_ACTIVE_QUESTIONS_REQUEST, getActiveQuestionsSaga)]);\r\n    yield all([takeEvery(actionTypes.GET_INACTIVE_QUESTIONS_REQUEST, getInactiveQuestionsSaga)]);\r\n    yield all([takeEvery(actionTypes.GET_WAITING_QUESTIONS_REQUEST, getWaitingQuestionsSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}