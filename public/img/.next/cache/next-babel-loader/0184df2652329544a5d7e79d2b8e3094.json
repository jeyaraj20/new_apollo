{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAllTestimonials(payload) {\n    const reponse = await Repository.get(`${apiUrl}/Testimonials/?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveTestimonials(payload) {\n    const reponse = await Repository.get(`${apiUrl}/Testimonials/inactive?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async savedashboardCategory(formdata) {\n    console.log(\"12345689\");\n    const reponse = await Repository.post(`${apiUrl}/dashboardCategory/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editdashboardCategory(categoryId, formdata) {\n    console.log(\"12345689\");\n    const reponse = await Repository.put(`${apiUrl}/dashboardCategory/catId/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(data) {\n    const reponse = await Repository.put(`${apiUrl}/dashboardCategory/inactive`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async deleteCategory(data) {\n    const reponse = await Repository.delete(`${apiUrl}/dashboardCategory/`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: data\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    ;\n    return reponse;\n  }\n\n  async changePosition(data) {\n    const reponse = await Repository.put(`${apiUrl}/dashboardCategory/position`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async imageUpload(formData) {\n    const reponse = await Repository.post(`${apiUrl}/image/dashboard`, formData).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/TestimonialsRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getAllTestimonials","payload","reponse","get","_start","_limit","then","response","data","catch","error","JSON","stringify","getInactiveTestimonials","savedashboardCategory","formdata","console","log","post","editdashboardCategory","categoryId","put","inactiveCategory","deleteCategory","delete","headers","changePosition","imageUpload","formData"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getAllTestimonials(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/Testimonials/?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveTestimonials(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/Testimonials/inactive?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n        \r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async savedashboardCategory(formdata) {\r\n        console.log(\"12345689\")\r\n        const reponse = await Repository.post(`${apiUrl}/dashboardCategory/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async editdashboardCategory(categoryId, formdata) {\r\n        console.log(\"12345689\")\r\n        const reponse = await Repository.put(`${apiUrl}/dashboardCategory/catId/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async inactiveCategory(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/dashboardCategory/inactive`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async deleteCategory(data) {\r\n        const reponse = await Repository.delete(`${apiUrl}/dashboardCategory/`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: data\r\n        }).then(response => {\r\n            return response.data;\r\n        }).catch(error => ({ error: JSON.stringify(error) }));;\r\n        return reponse;\r\n    }\r\n\r\n    async changePosition(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/dashboardCategory/position`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async imageUpload(formData) {\r\n        const reponse = await Repository.post(`${apiUrl}/image/dashboard`, formData)\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .catch(error => ({ error: JSON.stringify(error) }));\r\n    return reponse;\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}