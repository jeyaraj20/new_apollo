{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\Question_cloud\\\\question_cloud_admin_web_new\\\\pages\\\\changepassword\\\\view\\\\index.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Modal, Button, Checkbox, Spin, notification, Pagination, Tabs, Select } from 'antd';\n// import HeaderDashboard from '../../../components/header/HeaderDashboard';\n// import Sidebar from '../../../components/sections/sidebar';\n// import TableCity from '../../../components/tables/changepassword';\n// import { getAllCity, getInactiveCity } from '../../../store/City/action';\n// import LocationControllerRepository from '../../../repositories/LocationControllerRepository';\n// const Home = (props) => {\n//     const { TabPane } = Tabs;\n//     const { Option } = Select;\n//     const dispatch = useDispatch();\n//     const { auth } = useSelector(({ auth }) => auth);\n//     //const { allCity, totalActiveCount, inactiveCity, totalInactiveCount } = useSelector(({ City }) => City);\n//     const [errors, setErrors] = useState({});\n//     const [loader, setLoader] = useState(false);\n//     useEffect(() => {\n//         let local = JSON.parse(localStorage.getItem('persist:QuestionCloudAdmin'));\n//         let localAuth = local && local.auth ? JSON.parse(local.auth) : {};\n//         if (localAuth && !localAuth.isLoggedIn) {\n//             window.location.href = \"/\";\n//         }\n//     }, [auth]);\n//     // useEffect(() => {\n//     //     setLoader(true);\n//     //     let ctr = {};\n//     //     ctr._start = currentPage === 1 ? 0 : ((currentPage - 1) * pageSizeTotal);\n//     //     ctr._limit = pageSizeTotal;\n//     //     dispatch(getAllCity(ctr));\n//     //     dispatch(getInactiveCity(ctr));\n//     // }, []);\n//     // useEffect(() => {\n//     //     setLoader(false);\n//     // }, [allCity, inactiveCity]);\n//     return (\n//         <>\n//           <div style={{ marginBottom: '0rem', padding: '10px 30px', borderRadius: '0rem', backgroundColor: '#eee' }} className=\"page-heading d-sm-flex justify-content-sm-between align-items-sm-center\">\n//             <h2 className=\"title mb-3 mb-sm-0\">Change Password</h2>\n//           </div>\n//           <div style={{ padding: '5%' }} className=\"col-12\">\n//             {loader &&\n//               <div className=\"loader-view w-100\"\n//                 style={{ height: 'calc(100vh - 120px)' }}>\n//                 <HeaderDashboard />\n//               </div>\n//             }\n//             {!loader &&\n//               <div>\n//                 <div className=\"row no-gutters\">\n//                   <div className=\"col-lg-12 d-flex flex-column order-lg-1\">\n//                     <Tabs\n//                       required\n//                       disabled={true}\n//                       id=\"required\"\n//                       label={'Username'}\n//                       name={'Username'}\n//                       defaultValue={''}//jai\n//                       margin=\"none\" />\n//                     <Tabs\n//                       required\n//                       autoComplete={'off'}\n//                       id=\"required\"\n//                       type={'password'}\n//                       label={'Old Password'}\n//                       name={'OldPassword'}\n//                       onChange={(event) => onOldPasswordChange(event.target.value)}\n//                       onBlur={''}//valiadateProperty\n//                       value={''}//jai\n//                       margin=\"normal\" />\n//                     <h6 style={{ color: 'red' }}>{errors['OldPassword']}</h6>\n//                     <Tabs\n//                       required\n//                       autoComplete={'off'}\n//                       id=\"required\"\n//                       type={'password'}\n//                       label={'New Password'}\n//                       name={'NewPassword'}\n//                       onChange={(event) => onNewPasswordChange(event.target.value)}\n//                       onBlur={''}//valiadateProperty\n//                       value={''}//newPassword\n//                       margin=\"normal\" />\n//                     <h6 style={{ color: 'red' }}>{errors['NewPassword']}</h6>\n//                     <Tabs\n//                       required\n//                       type={'password'}\n//                       autoComplete={'off'}\n//                       id=\"required\"\n//                       label={'Confirm Password'}\n//                       name={'ConfirmPassword'}\n//                       onChange={(event) => onConfirmPasswordChange(event.target.value)}\n//                       onBlur={''}//valiadateProperty\n//                       value={''}//confirmPassword\n//                       margin=\"normal\" />\n//                     <h6 style={{ color: 'red' }}>{errors['ConfirmPassword']}</h6>\n//                     <div style={{ paddingTop: '2%', textAlign: 'center' }} className=\"col-lg-12 col-sm-12 col-12\">\n//                       <Button onClick={() => changePassword()} variant=\"contained\" color=\"primary\" className=\"jr-btn text-white\">Submit</Button>\n//                     </div>\n//                   </div>\n//                 </div>\n//                 <Spin\n//                   className=\"mb-3 bg-info\"\n//                   anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n//                   open={''}//showMessage\n//                   message={''}//alertMessage\n//                 />\n//               </div>\n//             }\n//           </div>\n//         </>\n//       );\n// };\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/button';\n\nvar ModalForm = /*#__PURE__*/function (_Component) {\n  _inherits(ModalForm, _Component);\n\n  var _super = _createSuper(ModalForm);\n\n  function ModalForm() {\n    var _this;\n\n    _classCallCheck(this, ModalForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      name: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      return _this.setState({\n        name: e.target.value\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ModalForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Modal, {\n        show: this.props.isOpen,\n        onHide: this.props.closeModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      }, __jsx(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 7\n        }\n      }, __jsx(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, \"Modal Form Title\")), __jsx(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, __jsx(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }, __jsx(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }, \"Name: \"), __jsx(Form.Control, {\n        type: \"text\",\n        onChange: this.handleChange,\n        value: this.state.name,\n        placeholder: \"name input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }))), __jsx(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 7\n        }\n      }, __jsx(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        onClick: function onClick() {\n          return _this2.props.handleSubmit(_this2.state.name);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      }, \"Submit\")));\n    }\n  }]);\n\n  return ModalForm;\n}(Component);\n\nexport { ModalForm as default };","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/pages/changepassword/view/index.jsx"],"names":["Form","Modal","Button","ModalForm","name","e","setState","target","value","props","isOpen","closeModal","handleChange","state","handleSubmit","Component"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,sBAAjB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;IAEqBC,S;;;;;;;;;;;;;;;;4DAEb;AAAEC,MAAAA,IAAI,EAAE;AAAR,K;;mEAES,UAACC,CAAD;AAAA,aAAO,MAAKC,QAAL,CAAc;AAACF,QAAAA,IAAI,EAAEC,CAAC,CAACE,MAAF,CAASC;AAAhB,OAAd,CAAP;AAAA,K;;;;;;;WAEf,kBAAQ;AAAA;;AACN,aACE,MAAC,KAAD;AACE,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,MADnB;AAEE,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,UAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIA,MAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CAJA,EAOA,MAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI,MAAC,IAAD,CAAM,OAAN;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,QAAQ,EAAE,KAAKC,YAAzC;AAAuD,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWT,IAAzE;AAA+E,QAAA,WAAW,EAAC,YAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CAPA,EAaA,MAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAwC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACK,KAAL,CAAWK,YAAX,CAAwB,MAAI,CAACD,KAAL,CAAWT,IAAnC,CAAN;AAAA,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAbA,CADF;AAqBD;;;;EA5BoCW,S;;SAAlBZ,S","sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { Modal, Button, Checkbox, Spin, notification, Pagination, Tabs, Select } from 'antd';\r\n// import HeaderDashboard from '../../../components/header/HeaderDashboard';\r\n// import Sidebar from '../../../components/sections/sidebar';\r\n// import TableCity from '../../../components/tables/changepassword';\r\n// import { getAllCity, getInactiveCity } from '../../../store/City/action';\r\n// import LocationControllerRepository from '../../../repositories/LocationControllerRepository';\r\n\r\n// const Home = (props) => {\r\n\r\n//     const { TabPane } = Tabs;\r\n//     const { Option } = Select;\r\n//     const dispatch = useDispatch();\r\n//     const { auth } = useSelector(({ auth }) => auth);\r\n//     //const { allCity, totalActiveCount, inactiveCity, totalInactiveCount } = useSelector(({ City }) => City);\r\n//     const [errors, setErrors] = useState({});\r\n//     const [loader, setLoader] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         let local = JSON.parse(localStorage.getItem('persist:QuestionCloudAdmin'));\r\n//         let localAuth = local && local.auth ? JSON.parse(local.auth) : {};\r\n//         if (localAuth && !localAuth.isLoggedIn) {\r\n//             window.location.href = \"/\";\r\n//         }\r\n//     }, [auth]);\r\n    \r\n//     // useEffect(() => {\r\n//     //     setLoader(true);\r\n//     //     let ctr = {};\r\n//     //     ctr._start = currentPage === 1 ? 0 : ((currentPage - 1) * pageSizeTotal);\r\n//     //     ctr._limit = pageSizeTotal;\r\n//     //     dispatch(getAllCity(ctr));\r\n//     //     dispatch(getInactiveCity(ctr));\r\n//     // }, []);\r\n\r\n//     // useEffect(() => {\r\n//     //     setLoader(false);\r\n//     // }, [allCity, inactiveCity]);\r\n\r\n    \r\n\r\n\r\n\r\n//     return (\r\n//         <>\r\n//           <div style={{ marginBottom: '0rem', padding: '10px 30px', borderRadius: '0rem', backgroundColor: '#eee' }} className=\"page-heading d-sm-flex justify-content-sm-between align-items-sm-center\">\r\n//             <h2 className=\"title mb-3 mb-sm-0\">Change Password</h2>\r\n//           </div>\r\n//           <div style={{ padding: '5%' }} className=\"col-12\">\r\n//             {loader &&\r\n//               <div className=\"loader-view w-100\"\r\n//                 style={{ height: 'calc(100vh - 120px)' }}>\r\n//                 <HeaderDashboard />\r\n//               </div>\r\n//             }\r\n//             {!loader &&\r\n//               <div>\r\n//                 <div className=\"row no-gutters\">\r\n//                   <div className=\"col-lg-12 d-flex flex-column order-lg-1\">\r\n//                     <Tabs\r\n//                       required\r\n//                       disabled={true}\r\n//                       id=\"required\"\r\n//                       label={'Username'}\r\n//                       name={'Username'}\r\n//                       defaultValue={''}//jai\r\n//                       margin=\"none\" />\r\n//                     <Tabs\r\n//                       required\r\n//                       autoComplete={'off'}\r\n//                       id=\"required\"\r\n//                       type={'password'}\r\n//                       label={'Old Password'}\r\n//                       name={'OldPassword'}\r\n//                       onChange={(event) => onOldPasswordChange(event.target.value)}\r\n//                       onBlur={''}//valiadateProperty\r\n//                       value={''}//jai\r\n//                       margin=\"normal\" />\r\n//                     <h6 style={{ color: 'red' }}>{errors['OldPassword']}</h6>\r\n//                     <Tabs\r\n//                       required\r\n//                       autoComplete={'off'}\r\n//                       id=\"required\"\r\n//                       type={'password'}\r\n//                       label={'New Password'}\r\n//                       name={'NewPassword'}\r\n//                       onChange={(event) => onNewPasswordChange(event.target.value)}\r\n//                       onBlur={''}//valiadateProperty\r\n//                       value={''}//newPassword\r\n//                       margin=\"normal\" />\r\n//                     <h6 style={{ color: 'red' }}>{errors['NewPassword']}</h6>\r\n//                     <Tabs\r\n//                       required\r\n//                       type={'password'}\r\n//                       autoComplete={'off'}\r\n//                       id=\"required\"\r\n//                       label={'Confirm Password'}\r\n//                       name={'ConfirmPassword'}\r\n//                       onChange={(event) => onConfirmPasswordChange(event.target.value)}\r\n//                       onBlur={''}//valiadateProperty\r\n//                       value={''}//confirmPassword\r\n//                       margin=\"normal\" />\r\n//                     <h6 style={{ color: 'red' }}>{errors['ConfirmPassword']}</h6>\r\n//                     <div style={{ paddingTop: '2%', textAlign: 'center' }} className=\"col-lg-12 col-sm-12 col-12\">\r\n//                       <Button onClick={() => changePassword()} variant=\"contained\" color=\"primary\" className=\"jr-btn text-white\">Submit</Button>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//                 <Spin\r\n//                   className=\"mb-3 bg-info\"\r\n//                   anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n//                   open={''}//showMessage\r\n//                   message={''}//alertMessage\r\n//                 />\r\n//               </div>\r\n//             }\r\n//           </div>\r\n//         </>\r\n//       );\r\n// };\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/button'\r\n\r\nexport default class ModalForm extends Component {\r\n\r\n  state={ name: null }\r\n\r\n  handleChange = (e) => this.setState({name: e.target.value})\r\n\r\n  render(){\r\n    return(\r\n      <Modal \r\n        show={this.props.isOpen} \r\n        onHide={this.props.closeModal}\r\n      >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Modal Form Title</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n          <Form.Group >\r\n              <Form.Label>Name: </Form.Label>\r\n              <Form.Control type=\"text\" onChange={this.handleChange} value={this.state.name} placeholder=\"name input\"/>           \r\n          </Form.Group>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n          <Button variant=\"primary\" type=\"submit\" onClick={() => this.props.handleSubmit(this.state.name)}>\r\n              Submit\r\n          </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}