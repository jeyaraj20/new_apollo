{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Repository, { apiUrl } from './Repository';\n\nvar AuthRepository = /*#__PURE__*/function () {\n  function AuthRepository(callback) {\n    _classCallCheck(this, AuthRepository);\n\n    this.callback = callback;\n  }\n\n  _createClass(AuthRepository, [{\n    key: \"adminLogin\",\n    value: function () {\n      var _adminLogin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n        var data, url, reponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  \"admin_name\": payload.user,\n                  \"admin_pass\": payload.password,\n                  \"type\": payload.type,\n                  \"logintype\": payload.logintype\n                };\n                url = '';\n\n                if (payload.type === \"S\") {\n                  url = \"\".concat(apiUrl, \"/login\");\n                } else {\n                  url = \"\".concat(apiUrl, \"/login/adminfaculty\");\n                }\n\n                _context.next = 5;\n                return Repository.post(url, data).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 5:\n                reponse = _context.sent;\n                return _context.abrupt(\"return\", reponse);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function adminLogin(_x) {\n        return _adminLogin.apply(this, arguments);\n      }\n\n      return adminLogin;\n    }()\n  }]);\n\n  return AuthRepository;\n}();\n\nexport default new AuthRepository();","map":{"version":3,"sources":["F:/newapollo/repositories/AuthRepository.js"],"names":["Repository","apiUrl","AuthRepository","callback","payload","data","user","password","type","logintype","url","post","then","response","error","JSON","stringify","reponse"],"mappings":";;;;AAAA,OAAOA,UAAP,IAAqBC,MAArB,QAAmC,cAAnC;;IAEMC,c;AACF,0BAAYC,QAAZ,EAAsB;AAAA;;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;;;;iFAED,iBAAiBC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,IADR,GACe;AACP,gCAAcD,OAAO,CAACE,IADf;AAEP,gCAAcF,OAAO,CAACG,QAFf;AAGP,0BAAQH,OAAO,CAACI,IAHT;AAIP,+BAAaJ,OAAO,CAACK;AAJd,iBADf;AAOQC,gBAAAA,GAPR,GAOc,EAPd;;AAQI,oBAAIN,OAAO,CAACI,IAAR,KAAiB,GAArB,EAA0B;AACtBE,kBAAAA,GAAG,aAAMT,MAAN,WAAH;AACH,iBAFD,MAEO;AACHS,kBAAAA,GAAG,aAAMT,MAAN,wBAAH;AACH;;AAZL;AAAA,uBAa0BD,UAAU,CAACW,IAAX,CAAgBD,GAAhB,EAAqBL,IAArB,EACjBO,IADiB,CACZ,UAAAC,QAAQ,EAAI;AACd,yBAAOA,QAAQ,CAACR,IAAhB;AACH,iBAHiB,WAIX,UAAAS,KAAK;AAAA,yBAAK;AAAEA,oBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,mBAAL;AAAA,iBAJM,CAb1B;;AAAA;AAaUG,gBAAAA,OAbV;AAAA,iDAkBWA,OAlBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAsBJ,eAAe,IAAIf,cAAJ,EAAf","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async adminLogin(payload) {\r\n        var data = {\r\n            \"admin_name\": payload.user,\r\n            \"admin_pass\": payload.password,\r\n            \"type\": payload.type,\r\n            \"logintype\": payload.logintype\r\n        };\r\n        let url = '';\r\n        if (payload.type === \"S\") {\r\n            url = `${apiUrl}/login`;\r\n        } else {\r\n            url = `${apiUrl}/login/adminfaculty`;\r\n        }\r\n        const reponse = await Repository.post(url, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}