{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async adminLogin(payload) {\n    var data = {\n      \"admin_name\": payload.user,\n      \"admin_pass\": payload.password,\n      \"type\": payload.type,\n      \"logintype\": payload.logintype\n    };\n    let url = '';\n\n    if (payload.type === \"S\") {\n      url = `${apiUrl}/login`;\n    } else {\n      url = `${apiUrl}/login/adminfaculty`;\n    }\n\n    const reponse = await Repository.post(url, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["F:/newapollo/repositories/AuthRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","adminLogin","payload","data","user","password","type","logintype","url","reponse","post","then","response","catch","error","JSON","stringify"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,MAArB,QAAmC,cAAnC;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEe,QAAVC,UAAU,CAACC,OAAD,EAAU;AACtB,QAAIC,IAAI,GAAG;AACP,oBAAcD,OAAO,CAACE,IADf;AAEP,oBAAcF,OAAO,CAACG,QAFf;AAGP,cAAQH,OAAO,CAACI,IAHT;AAIP,mBAAaJ,OAAO,CAACK;AAJd,KAAX;AAMA,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAIN,OAAO,CAACI,IAAR,KAAiB,GAArB,EAA0B;AACtBE,MAAAA,GAAG,GAAI,GAAEX,MAAO,QAAhB;AACH,KAFD,MAEO;AACHW,MAAAA,GAAG,GAAI,GAAEX,MAAO,qBAAhB;AACH;;AACD,UAAMY,OAAO,GAAG,MAAMb,UAAU,CAACc,IAAX,CAAgBF,GAAhB,EAAqBL,IAArB,EACjBQ,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACT,IAAhB;AACH,KAHiB,EAIjBU,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAOL,OAAP;AACH;;AAxBgB;;AA2BrB,eAAe,IAAIX,cAAJ,EAAf","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async adminLogin(payload) {\r\n        var data = {\r\n            \"admin_name\": payload.user,\r\n            \"admin_pass\": payload.password,\r\n            \"type\": payload.type,\r\n            \"logintype\": payload.logintype\r\n        };\r\n        let url = '';\r\n        if (payload.type === \"S\") {\r\n            url = `${apiUrl}/login`;\r\n        } else {\r\n            url = `${apiUrl}/login/adminfaculty`;\r\n        }\r\n        const reponse = await Repository.post(url, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}