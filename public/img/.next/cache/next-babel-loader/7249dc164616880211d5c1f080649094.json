{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Question_cloud\\\\question_cloud_admin_web_new\\\\pages\\\\changepassword\\\\view\\\\index.jsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Modal, Button, Checkbox, Spin, notification, Pagination, Tabs, Select } from 'antd';\n// import HeaderDashboard from '../../../components/header/HeaderDashboard';\n// import Sidebar from '../../../components/sections/sidebar';\n// import TableCity from '../../../components/tables/changepassword';\n// import { getAllCity, getInactiveCity } from '../../../store/City/action';\n// import LocationControllerRepository from '../../../repositories/LocationControllerRepository';\n// const Home = (props) => {\n//     const { TabPane } = Tabs;\n//     const { Option } = Select;\n//     const dispatch = useDispatch();\n//     const { auth } = useSelector(({ auth }) => auth);\n//     //const { allCity, totalActiveCount, inactiveCity, totalInactiveCount } = useSelector(({ City }) => City);\n//     const [errors, setErrors] = useState({});\n//     const [loader, setLoader] = useState(false);\n//     useEffect(() => {\n//         let local = JSON.parse(localStorage.getItem('persist:QuestionCloudAdmin'));\n//         let localAuth = local && local.auth ? JSON.parse(local.auth) : {};\n//         if (localAuth && !localAuth.isLoggedIn) {\n//             window.location.href = \"/\";\n//         }\n//     }, [auth]);\n//     // useEffect(() => {\n//     //     setLoader(true);\n//     //     let ctr = {};\n//     //     ctr._start = currentPage === 1 ? 0 : ((currentPage - 1) * pageSizeTotal);\n//     //     ctr._limit = pageSizeTotal;\n//     //     dispatch(getAllCity(ctr));\n//     //     dispatch(getInactiveCity(ctr));\n//     // }, []);\n//     // useEffect(() => {\n//     //     setLoader(false);\n//     // }, [allCity, inactiveCity]);\n//     return (\n//         <>\n//           <div style={{ marginBottom: '0rem', padding: '10px 30px', borderRadius: '0rem', backgroundColor: '#eee' }} className=\"page-heading d-sm-flex justify-content-sm-between align-items-sm-center\">\n//             <h2 className=\"title mb-3 mb-sm-0\">Change Password</h2>\n//           </div>\n//           <div style={{ padding: '5%' }} className=\"col-12\">\n//             {loader &&\n//               <div className=\"loader-view w-100\"\n//                 style={{ height: 'calc(100vh - 120px)' }}>\n//                 <HeaderDashboard />\n//               </div>\n//             }\n//             {!loader &&\n//               <div>\n//                 <div className=\"row no-gutters\">\n//                   <div className=\"col-lg-12 d-flex flex-column order-lg-1\">\n//                     <Tabs\n//                       required\n//                       disabled={true}\n//                       id=\"required\"\n//                       label={'Username'}\n//                       name={'Username'}\n//                       defaultValue={''}//jai\n//                       margin=\"none\" />\n//                     <Tabs\n//                       required\n//                       autoComplete={'off'}\n//                       id=\"required\"\n//                       type={'password'}\n//                       label={'Old Password'}\n//                       name={'OldPassword'}\n//                       onChange={(event) => onOldPasswordChange(event.target.value)}\n//                       onBlur={''}//valiadateProperty\n//                       value={''}//jai\n//                       margin=\"normal\" />\n//                     <h6 style={{ color: 'red' }}>{errors['OldPassword']}</h6>\n//                     <Tabs\n//                       required\n//                       autoComplete={'off'}\n//                       id=\"required\"\n//                       type={'password'}\n//                       label={'New Password'}\n//                       name={'NewPassword'}\n//                       onChange={(event) => onNewPasswordChange(event.target.value)}\n//                       onBlur={''}//valiadateProperty\n//                       value={''}//newPassword\n//                       margin=\"normal\" />\n//                     <h6 style={{ color: 'red' }}>{errors['NewPassword']}</h6>\n//                     <Tabs\n//                       required\n//                       type={'password'}\n//                       autoComplete={'off'}\n//                       id=\"required\"\n//                       label={'Confirm Password'}\n//                       name={'ConfirmPassword'}\n//                       onChange={(event) => onConfirmPasswordChange(event.target.value)}\n//                       onBlur={''}//valiadateProperty\n//                       value={''}//confirmPassword\n//                       margin=\"normal\" />\n//                     <h6 style={{ color: 'red' }}>{errors['ConfirmPassword']}</h6>\n//                     <div style={{ paddingTop: '2%', textAlign: 'center' }} className=\"col-lg-12 col-sm-12 col-12\">\n//                       <Button onClick={() => changePassword()} variant=\"contained\" color=\"primary\" className=\"jr-btn text-white\">Submit</Button>\n//                     </div>\n//                   </div>\n//                 </div>\n//                 <Spin\n//                   className=\"mb-3 bg-info\"\n//                   anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n//                   open={''}//showMessage\n//                   message={''}//alertMessage\n//                 />\n//               </div>\n//             }\n//           </div>\n//         </>\n//       );\n// };\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      name: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 7\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, \"Hello!! \", this.state.name), __jsx(\"a\", {\n        href: \"javascript:;\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, \"Open Modal\"));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(__jsx(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/pages/changepassword/view/index.jsx"],"names":["React","ReactDOM","App","props","state","name","Component","rootElement","document","getElementById","render"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAHiB;AAMlB;;;;WAED,kBAAS;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAa,KAAKD,KAAL,CAAWC,IAAxB,CADF,EAEE;AAAG,QAAA,IAAI,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CADF;AAQD;;;;EAlBeL,KAAK,CAACM,S;;AAqBxB,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAR,QAAQ,CAACS,MAAT,CAAgB,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBH,WAAzB","sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { Modal, Button, Checkbox, Spin, notification, Pagination, Tabs, Select } from 'antd';\r\n// import HeaderDashboard from '../../../components/header/HeaderDashboard';\r\n// import Sidebar from '../../../components/sections/sidebar';\r\n// import TableCity from '../../../components/tables/changepassword';\r\n// import { getAllCity, getInactiveCity } from '../../../store/City/action';\r\n// import LocationControllerRepository from '../../../repositories/LocationControllerRepository';\r\n\r\n// const Home = (props) => {\r\n\r\n//     const { TabPane } = Tabs;\r\n//     const { Option } = Select;\r\n//     const dispatch = useDispatch();\r\n//     const { auth } = useSelector(({ auth }) => auth);\r\n//     //const { allCity, totalActiveCount, inactiveCity, totalInactiveCount } = useSelector(({ City }) => City);\r\n//     const [errors, setErrors] = useState({});\r\n//     const [loader, setLoader] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         let local = JSON.parse(localStorage.getItem('persist:QuestionCloudAdmin'));\r\n//         let localAuth = local && local.auth ? JSON.parse(local.auth) : {};\r\n//         if (localAuth && !localAuth.isLoggedIn) {\r\n//             window.location.href = \"/\";\r\n//         }\r\n//     }, [auth]);\r\n    \r\n//     // useEffect(() => {\r\n//     //     setLoader(true);\r\n//     //     let ctr = {};\r\n//     //     ctr._start = currentPage === 1 ? 0 : ((currentPage - 1) * pageSizeTotal);\r\n//     //     ctr._limit = pageSizeTotal;\r\n//     //     dispatch(getAllCity(ctr));\r\n//     //     dispatch(getInactiveCity(ctr));\r\n//     // }, []);\r\n\r\n//     // useEffect(() => {\r\n//     //     setLoader(false);\r\n//     // }, [allCity, inactiveCity]);\r\n\r\n    \r\n\r\n\r\n\r\n//     return (\r\n//         <>\r\n//           <div style={{ marginBottom: '0rem', padding: '10px 30px', borderRadius: '0rem', backgroundColor: '#eee' }} className=\"page-heading d-sm-flex justify-content-sm-between align-items-sm-center\">\r\n//             <h2 className=\"title mb-3 mb-sm-0\">Change Password</h2>\r\n//           </div>\r\n//           <div style={{ padding: '5%' }} className=\"col-12\">\r\n//             {loader &&\r\n//               <div className=\"loader-view w-100\"\r\n//                 style={{ height: 'calc(100vh - 120px)' }}>\r\n//                 <HeaderDashboard />\r\n//               </div>\r\n//             }\r\n//             {!loader &&\r\n//               <div>\r\n//                 <div className=\"row no-gutters\">\r\n//                   <div className=\"col-lg-12 d-flex flex-column order-lg-1\">\r\n//                     <Tabs\r\n//                       required\r\n//                       disabled={true}\r\n//                       id=\"required\"\r\n//                       label={'Username'}\r\n//                       name={'Username'}\r\n//                       defaultValue={''}//jai\r\n//                       margin=\"none\" />\r\n//                     <Tabs\r\n//                       required\r\n//                       autoComplete={'off'}\r\n//                       id=\"required\"\r\n//                       type={'password'}\r\n//                       label={'Old Password'}\r\n//                       name={'OldPassword'}\r\n//                       onChange={(event) => onOldPasswordChange(event.target.value)}\r\n//                       onBlur={''}//valiadateProperty\r\n//                       value={''}//jai\r\n//                       margin=\"normal\" />\r\n//                     <h6 style={{ color: 'red' }}>{errors['OldPassword']}</h6>\r\n//                     <Tabs\r\n//                       required\r\n//                       autoComplete={'off'}\r\n//                       id=\"required\"\r\n//                       type={'password'}\r\n//                       label={'New Password'}\r\n//                       name={'NewPassword'}\r\n//                       onChange={(event) => onNewPasswordChange(event.target.value)}\r\n//                       onBlur={''}//valiadateProperty\r\n//                       value={''}//newPassword\r\n//                       margin=\"normal\" />\r\n//                     <h6 style={{ color: 'red' }}>{errors['NewPassword']}</h6>\r\n//                     <Tabs\r\n//                       required\r\n//                       type={'password'}\r\n//                       autoComplete={'off'}\r\n//                       id=\"required\"\r\n//                       label={'Confirm Password'}\r\n//                       name={'ConfirmPassword'}\r\n//                       onChange={(event) => onConfirmPasswordChange(event.target.value)}\r\n//                       onBlur={''}//valiadateProperty\r\n//                       value={''}//confirmPassword\r\n//                       margin=\"normal\" />\r\n//                     <h6 style={{ color: 'red' }}>{errors['ConfirmPassword']}</h6>\r\n//                     <div style={{ paddingTop: '2%', textAlign: 'center' }} className=\"col-lg-12 col-sm-12 col-12\">\r\n//                       <Button onClick={() => changePassword()} variant=\"contained\" color=\"primary\" className=\"jr-btn text-white\">Submit</Button>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//                 <Spin\r\n//                   className=\"mb-3 bg-info\"\r\n//                   anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n//                   open={''}//showMessage\r\n//                   message={''}//alertMessage\r\n//                 />\r\n//               </div>\r\n//             }\r\n//           </div>\r\n//         </>\r\n//       );\r\n// };\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Hello!! {this.state.name}</h1>\r\n        <a href=\"javascript:;\">\r\n          Open Modal\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);"]},"metadata":{},"sourceType":"module"}