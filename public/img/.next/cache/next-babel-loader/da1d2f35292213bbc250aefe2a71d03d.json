{"ast":null,"code":"import { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { actionTypes, loginSuccess, logoutSuccess } from './action';\nimport AuthRepository from '../../repositories/AuthRepository';\n\nfunction* loginSaga({\n  payload\n}) {\n  try {\n    const data = yield call(AuthRepository.login, payload);\n\n    if (data && data.statusCode === 200 && data.authorization) {\n      let res = data.data;\n      res.authorization = data.authorization;\n      res.isLoggedIn = true;\n      yield put(loginSuccess(res));\n    } else if (data && data.statusCode === 400) {} else if (data && data.statusCode === 404) {} else {}\n  } catch (err) {// console.log(err);\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    localStorage.removeItem('usertoken'); // yield call(AuthRepository.logout);\n\n    yield put(logoutSuccess());\n  } catch (err) {// console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.LOGIN_REQUEST, loginSaga)]);\n  yield all([takeEvery(actionTypes.LOGOUT_REQUEST, logoutSaga)]);\n}","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/store/auth/saga.js"],"names":["all","put","call","takeEvery","actionTypes","loginSuccess","logoutSuccess","AuthRepository","loginSaga","payload","data","login","statusCode","authorization","res","isLoggedIn","err","logoutSaga","localStorage","removeItem","rootSaga","LOGIN_REQUEST","LOGOUT_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAkBC,IAAlB,EAAwBC,SAAxB,QAAyC,oBAAzC;AAEA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,aAApC,QAAyD,UAAzD;AAEA,OAAOC,cAAP,MAA2B,mCAA3B;;AAGA,UAAUC,SAAV,CAAoB;AAACC,EAAAA;AAAD,CAApB,EAA+B;AAC3B,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMR,IAAI,CAACK,cAAc,CAACI,KAAhB,EAAuBF,OAAvB,CAAvB;;AACA,QAAGC,IAAI,IAAIA,IAAI,CAACE,UAAL,KAAoB,GAA5B,IAAmCF,IAAI,CAACG,aAA3C,EAAyD;AACrD,UAAIC,GAAG,GAAGJ,IAAI,CAACA,IAAf;AACAI,MAAAA,GAAG,CAACD,aAAJ,GAAoBH,IAAI,CAACG,aAAzB;AACAC,MAAAA,GAAG,CAACC,UAAJ,GAAiB,IAAjB;AACA,YAAMd,GAAG,CAACI,YAAY,CAACS,GAAD,CAAb,CAAT;AACH,KALD,MAKM,IAAGJ,IAAI,IAAIA,IAAI,CAACE,UAAL,KAAoB,GAA/B,EAAoC,CACzC,CADK,MACA,IAAGF,IAAI,IAAIA,IAAI,CAACE,UAAL,KAAoB,GAA/B,EAAoC,CACzC,CADK,MACD,CACJ;AACJ,GAXD,CAWG,OAAOI,GAAP,EAAY,CACX;AACH;AACJ;;AAED,UAAUC,UAAV,GAAuB;AACnB,MAAI;AACAC,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB,EADA,CAEA;;AACA,UAAMlB,GAAG,CAACK,aAAa,EAAd,CAAT;AACH,GAJD,CAIG,OAAOU,GAAP,EAAY,CACX;AACH;AACJ;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACiB,aAAb,EAA4Bb,SAA5B,CAAV,CAAD,CAAT;AACA,QAAMR,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACkB,cAAb,EAA6BL,UAA7B,CAAV,CAAD,CAAT;AACH","sourcesContent":["import { all, put,call, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { actionTypes, loginSuccess, logoutSuccess } from './action';\r\n\r\nimport AuthRepository from '../../repositories/AuthRepository';\r\n\r\n\r\nfunction* loginSaga({payload}) {\r\n    try {\r\n        const data = yield call(AuthRepository.login, payload);\r\n        if(data && data.statusCode === 200 && data.authorization){\r\n            let res = data.data;\r\n            res.authorization = data.authorization;\r\n            res.isLoggedIn = true;\r\n            yield put(loginSuccess(res));\r\n        }else if(data && data.statusCode === 400 ){\r\n        }else if(data && data.statusCode === 404 ){\r\n        }else{\r\n        }\r\n    }  catch (err) {\r\n        // console.log(err);\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try {\r\n        localStorage.removeItem('usertoken');\r\n        // yield call(AuthRepository.logout);\r\n        yield put(logoutSuccess());\r\n    }  catch (err) {\r\n        // console.log(err);\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([takeEvery(actionTypes.LOGIN_REQUEST, loginSaga)]);\r\n    yield all([takeEvery(actionTypes.LOGOUT_REQUEST, logoutSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}