{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAllAnnouncements(payload) {\n    const reponse = await Repository.get(`${apiUrl}/Announcements/?_start=${payload._start}&_limit=${payload._limit}&search=${payload.search}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveAnnouncements(payload) {\n    const reponse = await Repository.get(`${apiUrl}/Announcements/inactive?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveAnnouncements(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/Announcements/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editAnnouncements(categoryId, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/Announcements/Id/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(data) {\n    const reponse = await Repository.put(`${apiUrl}/Announcements/inactive`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async deleteCategory(data) {\n    const reponse = await Repository.delete(`${apiUrl}/Announcements/`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: data\n    }).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    ;\n    return reponse;\n  }\n\n  async changePosition(data) {\n    const reponse = await Repository.put(`${apiUrl}/Announcements/position`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async SearchResult(data) {\n    const reponse = await Repository.post(`${apiUrl}/Announcements/search`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/ExampackageRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getAllAnnouncements","payload","reponse","get","_start","_limit","search","then","response","data","catch","error","JSON","stringify","getInactiveAnnouncements","saveAnnouncements","formdata","post","editAnnouncements","categoryId","put","inactiveCategory","deleteCategory","delete","headers","changePosition","SearchResult"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getAllAnnouncements(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/Announcements/?_start=${payload._start}&_limit=${payload._limit}&search=${payload.search}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveAnnouncements(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/Announcements/inactive?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async saveAnnouncements(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/Announcements/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async editAnnouncements(categoryId, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/Announcements/Id/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async inactiveCategory(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/Announcements/inactive`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async deleteCategory(data) {\r\n        const reponse = await Repository.delete(`${apiUrl}/Announcements/`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            data: data\r\n        }).then(response => {\r\n            return response.data;\r\n        }).catch(error => ({ error: JSON.stringify(error) }));;\r\n        return reponse;\r\n    }\r\n\r\n    async changePosition(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/Announcements/position`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    \r\n    async SearchResult(data) {\r\n        const reponse = await Repository.post(`${apiUrl}/Announcements/search`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    \r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}