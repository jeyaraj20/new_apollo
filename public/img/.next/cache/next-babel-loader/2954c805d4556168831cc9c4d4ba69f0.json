{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getActiveExams(payload, status) {\n    const reponse = await Repository.get(`${apiUrl}/examinationCalendar/sub?_start=${payload._start}&_limit=${payload._limit}`, status = 'Y').then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveExams(payload) {\n    const reponse = await Repository.get(`${apiUrl}/examinationCalendar/sub?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getActiveMain(payload) {\n    const reponse = await Repository.get(`${apiUrl}/examinationCalendar/main?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveMain(payload) {\n    const reponse = await Repository.get(`${apiUrl}/examinationCalendar/main?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveExaminationCalendar(formdata) {\n    console.log(\"12345689\");\n    const reponse = await Repository.post(`${apiUrl}/examinationCalendar/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editExaminationCalendar(categoryId, formdata) {\n    console.log(\"12345689\");\n    const reponse = await Repository.put(`${apiUrl}/examinationCalendar/ExamId/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(formdata) {\n    console.log(\"12345689\");\n    const reponse = await Repository.post(`${apiUrl}/examinationCalendar/status/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/ExaminationCalendarRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getActiveExams","payload","status","reponse","get","_start","_limit","then","response","data","catch","error","JSON","stringify","getInactiveExams","getActiveMain","getInactiveMain","saveExaminationCalendar","formdata","console","log","post","editExaminationCalendar","categoryId","put","inactiveCategory"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n    async getActiveExams(payload,status) {\r\n        const reponse = await Repository.get(`${apiUrl}/examinationCalendar/sub?_start=${payload._start}&_limit=${payload._limit}`,status='Y')\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async getInactiveExams(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/examinationCalendar/sub?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async getActiveMain(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/examinationCalendar/main?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async getInactiveMain(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/examinationCalendar/main?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async saveExaminationCalendar(formdata) {\r\n        console.log(\"12345689\")\r\n        const reponse = await Repository.post(`${apiUrl}/examinationCalendar/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async editExaminationCalendar(categoryId, formdata) {\r\n        console.log(\"12345689\")\r\n        const reponse = await Repository.put(`${apiUrl}/examinationCalendar/ExamId/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async inactiveCategory(formdata) {\r\n        console.log(\"12345689\")\r\n        const reponse = await Repository.post(`${apiUrl}/examinationCalendar/status/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}