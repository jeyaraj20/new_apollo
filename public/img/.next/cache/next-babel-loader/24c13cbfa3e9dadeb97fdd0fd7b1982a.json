{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllCitySaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getInactiveCitySaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getAllStateSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { actionTypes, getAllCitySuccess, getInactiveCitySuccess, getAllStateSuccess } from './action';\nimport CityRepository from '../../repositories/LocationControllerRepository';\n\nfunction getAllCitySaga(_ref) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getAllCitySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(CityRepository.getAllCity, payload);\n\n        case 4:\n          data = _context.sent;\n          _context.next = 7;\n          return put(getAllCitySuccess(data));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(getAllCitySuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction getInactiveCitySaga(_ref2) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getInactiveCitySaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(CityRepository.getInactiveCity, payload);\n\n        case 4:\n          data = _context2.sent;\n          _context2.next = 7;\n          return put(getInactiveCitySuccess(data));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 13;\n          return put(getInactiveCitySuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nfunction getAllStateSaga(_ref3) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getAllStateSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(CityRepository.getAllState, payload);\n\n        case 4:\n          data = _context3.sent;\n          _context3.next = 7;\n          return put(getAllStateSuccess(data));\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 13;\n          return put(getAllStateSuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actionTypes.GET_ALL_CITY_REQUEST, getAllCitySaga)]);\n\n        case 2:\n          _context4.next = 4;\n          return all([takeEvery(actionTypes.GET_INACTIVE_CITY_REQUEST, getInactiveCitySaga)]);\n\n        case 4:\n          _context4.next = 6;\n          return all([takeEvery(actionTypes.GET_ALL_STATE_REQUEST, getAllStateSaga)]);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/store/City/saga.js"],"names":["getAllCitySaga","getInactiveCitySaga","getAllStateSaga","rootSaga","all","put","call","takeEvery","actionTypes","getAllCitySuccess","getInactiveCitySuccess","getAllStateSuccess","CityRepository","payload","getAllCity","data","getInactiveCity","getAllState","GET_ALL_CITY_REQUEST","GET_INACTIVE_CITY_REQUEST","GET_ALL_STATE_REQUEST"],"mappings":";;oDAMUA,c;qDASAC,mB;qDASAC,e;qDASeC,Q;;AAjCzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,WAAT,EAAsBC,iBAAtB,EAAyCC,sBAAzC,EAAiEC,kBAAjE,QAA2F,UAA3F;AAEA,OAAOC,cAAP,MAA2B,iDAA3B;;AAEA,SAAUZ,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2Ba,UAAAA,OAA3B,QAA2BA,OAA3B;AAAA;AAAA;AAEqB,iBAAMP,IAAI,CAACM,cAAc,CAACE,UAAhB,EAA4BD,OAA5B,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMV,GAAG,CAACI,iBAAiB,CAACM,IAAD,CAAlB,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAACI,iBAAiB,CAAC,IAAD,CAAlB,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUR,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCY,UAAAA,OAAhC,SAAgCA,OAAhC;AAAA;AAAA;AAEqB,iBAAMP,IAAI,CAACM,cAAc,CAACI,eAAhB,EAAiCH,OAAjC,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMV,GAAG,CAACK,sBAAsB,CAACK,IAAD,CAAvB,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAACK,sBAAsB,CAAC,IAAD,CAAvB,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUR,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4BW,UAAAA,OAA5B,SAA4BA,OAA5B;AAAA;AAAA;AAEqB,iBAAMP,IAAI,CAACM,cAAc,CAACK,WAAhB,EAA6BJ,OAA7B,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMV,GAAG,CAACM,kBAAkB,CAACI,IAAD,CAAnB,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAACM,kBAAkB,CAAC,IAAD,CAAnB,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACU,oBAAb,EAAmClB,cAAnC,CAAV,CAAD,CAAT;;AADW;AAAA;AAEX,iBAAMI,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACW,yBAAb,EAAwClB,mBAAxC,CAAV,CAAD,CAAT;;AAFW;AAAA;AAGX,iBAAMG,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACY,qBAAb,EAAoClB,eAApC,CAAV,CAAD,CAAT;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, call, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { actionTypes, getAllCitySuccess, getInactiveCitySuccess ,getAllStateSuccess } from './action';\r\n\r\nimport CityRepository from '../../repositories/LocationControllerRepository';\r\n\r\nfunction* getAllCitySaga({ payload }) {\r\n    try {\r\n        const data = yield call(CityRepository.getAllCity, payload);\r\n        yield put(getAllCitySuccess(data));\r\n    } catch (err) {\r\n        yield put(getAllCitySuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getInactiveCitySaga({ payload }) {\r\n    try {\r\n        const data = yield call(CityRepository.getInactiveCity, payload);\r\n        yield put(getInactiveCitySuccess(data));\r\n    } catch (err) {\r\n        yield put(getInactiveCitySuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getAllStateSaga({ payload }) {\r\n    try {\r\n        const data = yield call(CityRepository.getAllState, payload);\r\n        yield put(getAllStateSuccess(data));\r\n    } catch (err) {\r\n        yield put(getAllStateSuccess(null));\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([takeEvery(actionTypes.GET_ALL_CITY_REQUEST, getAllCitySaga)]);\r\n    yield all([takeEvery(actionTypes.GET_INACTIVE_CITY_REQUEST, getInactiveCitySaga)]);\r\n    yield all([takeEvery(actionTypes.GET_ALL_STATE_REQUEST, getAllStateSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}