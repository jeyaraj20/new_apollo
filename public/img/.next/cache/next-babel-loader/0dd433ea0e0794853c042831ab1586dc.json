{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getActiveQuestionsSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getInactiveQuestionsSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(getWaitingQuestionsSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { actionTypes, getActiveQuestionsSuccess, getInactiveQuestionsSuccess, getWaitingQuestionsSuccess } from './action';\nimport QuestionRepository from '../../repositories/QuestionRepository';\n\nfunction getActiveQuestionsSaga(_ref) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getActiveQuestionsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(QuestionRepository.getActiveQuestions, payload);\n\n        case 4:\n          data = _context.sent;\n          _context.next = 7;\n          return put(getActiveQuestionsSuccess(data));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(getActiveQuestionsSuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction getInactiveQuestionsSaga(_ref2) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getInactiveQuestionsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(QuestionRepository.getInactiveQuestions, payload);\n\n        case 4:\n          data = _context2.sent;\n          _context2.next = 7;\n          return put(getInactiveQuestionsSuccess(data));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 13;\n          return put(getInactiveQuestionsSuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nfunction getWaitingQuestionsSaga(_ref3) {\n  var payload, data;\n  return _regeneratorRuntime.wrap(function getWaitingQuestionsSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(QuestionRepository.getWaitingQuestions, payload);\n\n        case 4:\n          data = _context3.sent;\n          _context3.next = 7;\n          return put(getWaitingQuestionsSuccess(data));\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 13;\n          return put(getWaitingQuestionsSuccess(null));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 9]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actionTypes.GET_ACTIVE_QUESTIONS_REQUEST, getActiveQuestionsSaga)]);\n\n        case 2:\n          _context4.next = 4;\n          return all([takeEvery(actionTypes.GET_INACTIVE_QUESTIONS_REQUEST, getInactiveQuestionsSaga)]);\n\n        case 4:\n          _context4.next = 6;\n          return all([takeEvery(actionTypes.GET_WAITING_QUESTIONS_REQUEST, getWaitingQuestionsSaga)]);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/store/questions/saga.js"],"names":["getActiveQuestionsSaga","getInactiveQuestionsSaga","getWaitingQuestionsSaga","rootSaga","all","put","call","takeEvery","actionTypes","getActiveQuestionsSuccess","getInactiveQuestionsSuccess","getWaitingQuestionsSuccess","QuestionRepository","payload","getActiveQuestions","data","getInactiveQuestions","getWaitingQuestions","GET_ACTIVE_QUESTIONS_REQUEST","GET_INACTIVE_QUESTIONS_REQUEST","GET_WAITING_QUESTIONS_REQUEST"],"mappings":";;oDAMUA,sB;qDASAC,wB;qDASAC,uB;qDASeC,Q;;AAjCzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,WAAT,EAAsBC,yBAAtB,EAAiDC,2BAAjD,EAA8EC,0BAA9E,QAAgH,UAAhH;AAEA,OAAOC,kBAAP,MAA+B,uCAA/B;;AAEA,SAAUZ,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCa,UAAAA,OAAnC,QAAmCA,OAAnC;AAAA;AAAA;AAEqB,iBAAMP,IAAI,CAACM,kBAAkB,CAACE,kBAApB,EAAwCD,OAAxC,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMV,GAAG,CAACI,yBAAyB,CAACM,IAAD,CAA1B,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAACI,yBAAyB,CAAC,IAAD,CAA1B,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUR,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqCY,UAAAA,OAArC,SAAqCA,OAArC;AAAA;AAAA;AAEqB,iBAAMP,IAAI,CAACM,kBAAkB,CAACI,oBAApB,EAA0CH,OAA1C,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMV,GAAG,CAACK,2BAA2B,CAACK,IAAD,CAA5B,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAACK,2BAA2B,CAAC,IAAD,CAA5B,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUR,uBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoCW,UAAAA,OAApC,SAAoCA,OAApC;AAAA;AAAA;AAEqB,iBAAMP,IAAI,CAACM,kBAAkB,CAACK,mBAApB,EAAyCJ,OAAzC,CAAV;;AAFrB;AAEcE,UAAAA,IAFd;AAAA;AAGQ,iBAAMV,GAAG,CAACM,0BAA0B,CAACI,IAAD,CAA3B,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAACM,0BAA0B,CAAC,IAAD,CAA3B,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACU,4BAAb,EAA2ClB,sBAA3C,CAAV,CAAD,CAAT;;AADW;AAAA;AAEX,iBAAMI,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACW,8BAAb,EAA6ClB,wBAA7C,CAAV,CAAD,CAAT;;AAFW;AAAA;AAGX,iBAAMG,GAAG,CAAC,CAACG,SAAS,CAACC,WAAW,CAACY,6BAAb,EAA4ClB,uBAA5C,CAAV,CAAD,CAAT;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, call, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { actionTypes, getActiveQuestionsSuccess, getInactiveQuestionsSuccess, getWaitingQuestionsSuccess } from './action';\r\n\r\nimport QuestionRepository from '../../repositories/QuestionRepository';\r\n\r\nfunction* getActiveQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(QuestionRepository.getActiveQuestions, payload);\r\n        yield put(getActiveQuestionsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getActiveQuestionsSuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getInactiveQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(QuestionRepository.getInactiveQuestions, payload);\r\n        yield put(getInactiveQuestionsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getInactiveQuestionsSuccess(null));\r\n    }\r\n}\r\n\r\nfunction* getWaitingQuestionsSaga({ payload }) {\r\n    try {\r\n        const data = yield call(QuestionRepository.getWaitingQuestions, payload);\r\n        yield put(getWaitingQuestionsSuccess(data));\r\n    } catch (err) {\r\n        yield put(getWaitingQuestionsSuccess(null));\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([takeEvery(actionTypes.GET_ACTIVE_QUESTIONS_REQUEST, getActiveQuestionsSaga)]);\r\n    yield all([takeEvery(actionTypes.GET_INACTIVE_QUESTIONS_REQUEST, getInactiveQuestionsSaga)]);\r\n    yield all([takeEvery(actionTypes.GET_WAITING_QUESTIONS_REQUEST, getWaitingQuestionsSaga)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}