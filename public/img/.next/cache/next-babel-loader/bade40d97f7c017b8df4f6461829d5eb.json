{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass AuthRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getAllState(payload) {\n    const reponse = await Repository.get(`${apiUrl}/location/state/Y?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveState(payload) {\n    const reponse = await Repository.get(`${apiUrl}/location/state/N?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveState(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/location/state/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editState(categoryId, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/location/State/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(data) {\n    const reponse = await Repository.put(`${apiUrl}/location/statestatus`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  } //City\n\n\n  async getAllCity(payload) {\n    const reponse = await Repository.get(`${apiUrl}/location/city/Y?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveCity(payload) {\n    const reponse = await Repository.get(`${apiUrl}/location/city/N?_start=${payload._start}&_limit=${payload._limit}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveCity(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/location/city/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async editCity(categoryId, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/location/city/${categoryId}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async inactiveCategory(data) {\n    const reponse = await Repository.put(`${apiUrl}/location/city`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new AuthRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/LocationControllerRepository.js"],"names":["Repository","apiUrl","AuthRepository","constructor","callback","getAllState","payload","reponse","get","_start","_limit","then","response","data","catch","error","JSON","stringify","getInactiveState","saveState","formdata","post","editState","categoryId","put","inactiveCategory","getAllCity","getInactiveCity","saveCity","editCity"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass AuthRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getAllState(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/location/state/Y?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    \r\n    async getInactiveState(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/location/state/N?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n   \r\n    async saveState(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/location/state/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async editState(categoryId, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/location/State/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async inactiveCategory(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/location/statestatus`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n  //City\r\n    async getAllCity(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/location/city/Y?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async getInactiveCity(payload) {\r\n        const reponse = await Repository.get(`${apiUrl}/location/city/N?_start=${payload._start}&_limit=${payload._limit}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async saveCity(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/location/city/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async editCity(categoryId, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/location/city/${categoryId}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async inactiveCategory(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/location/city`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new AuthRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}