{"ast":null,"code":"import Repository, { apiUrl } from './Repository';\n\nclass QuestionRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getActiveQuestions(payload) {\n    const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getInactiveQuestions(payload) {\n    const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getWaitingQuestions(payload) {\n    const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getQuestionId(payload) {\n    const reponse = await Repository.post(`${apiUrl}/question/questionNo`, payload).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getQuestionById(qid) {\n    const reponse = await Repository.get(`${apiUrl}/question/qid/${qid}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getPassageQuestionById(qid) {\n    const reponse = await Repository.get(`${apiUrl}/question/passage/qid/${qid}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async saveQuestion(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/question/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async updateQuestion(qid, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/question/qid/${qid}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async savePassageQuestion(formdata) {\n    const reponse = await Repository.post(`${apiUrl}/question/passage/`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async updatePassageQuestion(qid, formdata) {\n    const reponse = await Repository.put(`${apiUrl}/question/passage/${qid}`, formdata).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async deletePassageQuestionById(qid) {\n    const reponse = await Repository.get(`${apiUrl}/question/passage/delete/qid/${qid}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async questionsStatusChange(data) {\n    const reponse = await Repository.put(`${apiUrl}/question/inactive`, data).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async imageUpload(formData) {\n    const reponse = await Repository.post(`${apiUrl}/question/image`, formData).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new QuestionRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/QuestionRepository.js"],"names":["Repository","apiUrl","QuestionRepository","constructor","callback","getActiveQuestions","payload","reponse","post","then","response","data","catch","error","JSON","stringify","getInactiveQuestions","getWaitingQuestions","getQuestionId","getQuestionById","qid","get","getPassageQuestionById","saveQuestion","formdata","updateQuestion","put","savePassageQuestion","updatePassageQuestion","deletePassageQuestionById","questionsStatusChange","imageUpload","formData"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass QuestionRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getActiveQuestions(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveQuestions(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getWaitingQuestions(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getQuestionId(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/questionNo`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getQuestionById(qid) {\r\n        const reponse = await Repository.get(`${apiUrl}/question/qid/${qid}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPassageQuestionById(qid) {\r\n        const reponse = await Repository.get(`${apiUrl}/question/passage/qid/${qid}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async saveQuestion(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async updateQuestion(qid, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/question/qid/${qid}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async savePassageQuestion(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/passage/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async updatePassageQuestion(qid, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/question/passage/${qid}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async deletePassageQuestionById(qid) {\r\n        const reponse = await Repository.get(`${apiUrl}/question/passage/delete/qid/${qid}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async questionsStatusChange(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/question/inactive`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async imageUpload(formData) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/image`, formData)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new QuestionRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}