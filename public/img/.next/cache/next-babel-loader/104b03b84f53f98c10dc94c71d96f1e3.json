{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Repository, { apiUrl } from './Repository';\n\nvar QuestionRepository = /*#__PURE__*/function () {\n  function QuestionRepository(callback) {\n    _classCallCheck(this, QuestionRepository);\n\n    this.callback = callback;\n  }\n\n  _createClass(QuestionRepository, [{\n    key: \"getActiveQuestions\",\n    value: function () {\n      var _getActiveQuestions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/get/status\"), payload).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context.sent;\n                return _context.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getActiveQuestions(_x) {\n        return _getActiveQuestions.apply(this, arguments);\n      }\n\n      return getActiveQuestions;\n    }()\n  }, {\n    key: \"getInactiveQuestions\",\n    value: function () {\n      var _getInactiveQuestions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/get/status\"), payload).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context2.sent;\n                return _context2.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInactiveQuestions(_x2) {\n        return _getInactiveQuestions.apply(this, arguments);\n      }\n\n      return getInactiveQuestions;\n    }()\n  }, {\n    key: \"getWaitingQuestions\",\n    value: function () {\n      var _getWaitingQuestions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/get/status\"), payload).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context3.sent;\n                return _context3.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getWaitingQuestions(_x3) {\n        return _getWaitingQuestions.apply(this, arguments);\n      }\n\n      return getWaitingQuestions;\n    }()\n  }, {\n    key: \"getQuestionId\",\n    value: function () {\n      var _getQuestionId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/questionNo\"), payload).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context4.sent;\n                return _context4.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getQuestionId(_x4) {\n        return _getQuestionId.apply(this, arguments);\n      }\n\n      return getQuestionId;\n    }()\n  }, {\n    key: \"getQuestionById\",\n    value: function () {\n      var _getQuestionById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(qid) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Repository.get(\"\".concat(apiUrl, \"/question/qid/\").concat(qid)).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context5.sent;\n                return _context5.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getQuestionById(_x5) {\n        return _getQuestionById.apply(this, arguments);\n      }\n\n      return getQuestionById;\n    }()\n  }, {\n    key: \"getPassageQuestionById\",\n    value: function () {\n      var _getPassageQuestionById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(qid) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Repository.get(\"\".concat(apiUrl, \"/question/passage/qid/\").concat(qid)).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context6.sent;\n                return _context6.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getPassageQuestionById(_x6) {\n        return _getPassageQuestionById.apply(this, arguments);\n      }\n\n      return getPassageQuestionById;\n    }()\n  }, {\n    key: \"saveQuestion\",\n    value: function () {\n      var _saveQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(formdata) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/\"), formdata).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context7.sent;\n                return _context7.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function saveQuestion(_x7) {\n        return _saveQuestion.apply(this, arguments);\n      }\n\n      return saveQuestion;\n    }()\n  }, {\n    key: \"updateQuestion\",\n    value: function () {\n      var _updateQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(qid, formdata) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return Repository.put(\"\".concat(apiUrl, \"/question/qid/\").concat(qid), formdata).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context8.sent;\n                return _context8.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function updateQuestion(_x8, _x9) {\n        return _updateQuestion.apply(this, arguments);\n      }\n\n      return updateQuestion;\n    }()\n  }, {\n    key: \"savePassageQuestion\",\n    value: function () {\n      var _savePassageQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(formdata) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/passage/\"), formdata).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context9.sent;\n                return _context9.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function savePassageQuestion(_x10) {\n        return _savePassageQuestion.apply(this, arguments);\n      }\n\n      return savePassageQuestion;\n    }()\n  }, {\n    key: \"updatePassageQuestion\",\n    value: function () {\n      var _updatePassageQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(qid, formdata) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return Repository.put(\"\".concat(apiUrl, \"/question/passage/\").concat(qid), formdata).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context10.sent;\n                return _context10.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function updatePassageQuestion(_x11, _x12) {\n        return _updatePassageQuestion.apply(this, arguments);\n      }\n\n      return updatePassageQuestion;\n    }()\n  }, {\n    key: \"deletePassageQuestionById\",\n    value: function () {\n      var _deletePassageQuestionById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(qid) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return Repository.get(\"\".concat(apiUrl, \"/question/passage/delete/qid/\").concat(qid)).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context11.sent;\n                return _context11.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function deletePassageQuestionById(_x13) {\n        return _deletePassageQuestionById.apply(this, arguments);\n      }\n\n      return deletePassageQuestionById;\n    }()\n  }, {\n    key: \"questionsStatusChange\",\n    value: function () {\n      var _questionsStatusChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(data) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return Repository.put(\"\".concat(apiUrl, \"/question/inactive\"), data).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context12.sent;\n                return _context12.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function questionsStatusChange(_x14) {\n        return _questionsStatusChange.apply(this, arguments);\n      }\n\n      return questionsStatusChange;\n    }()\n  }, {\n    key: \"imageUpload\",\n    value: function () {\n      var _imageUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(formData) {\n        var reponse;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return Repository.post(\"\".concat(apiUrl, \"/question/image\"), formData).then(function (response) {\n                  return response.data;\n                })[\"catch\"](function (error) {\n                  return {\n                    error: JSON.stringify(error)\n                  };\n                });\n\n              case 2:\n                reponse = _context13.sent;\n                return _context13.abrupt(\"return\", reponse);\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      function imageUpload(_x15) {\n        return _imageUpload.apply(this, arguments);\n      }\n\n      return imageUpload;\n    }()\n  }]);\n\n  return QuestionRepository;\n}();\n\nexport default new QuestionRepository();","map":{"version":3,"sources":["D:/Question_cloud/question_cloud_admin_web_new/repositories/QuestionRepository.js"],"names":["Repository","apiUrl","QuestionRepository","callback","payload","post","then","response","data","error","JSON","stringify","reponse","qid","get","formdata","put","formData"],"mappings":"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","sourcesContent":["import Repository, { apiUrl } from './Repository';\r\n\r\nclass QuestionRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getActiveQuestions(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getInactiveQuestions(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getWaitingQuestions(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/get/status`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getQuestionId(payload) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/questionNo`, payload)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getQuestionById(qid) {\r\n        const reponse = await Repository.get(`${apiUrl}/question/qid/${qid}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getPassageQuestionById(qid) {\r\n        const reponse = await Repository.get(`${apiUrl}/question/passage/qid/${qid}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async saveQuestion(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async updateQuestion(qid, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/question/qid/${qid}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async savePassageQuestion(formdata) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/passage/`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async updatePassageQuestion(qid, formdata) {\r\n        const reponse = await Repository.put(`${apiUrl}/question/passage/${qid}`, formdata)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async deletePassageQuestionById(qid) {\r\n        const reponse = await Repository.get(`${apiUrl}/question/passage/delete/qid/${qid}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async questionsStatusChange(data) {\r\n        const reponse = await Repository.put(`${apiUrl}/question/inactive`, data)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async imageUpload(formData) {\r\n        const reponse = await Repository.post(`${apiUrl}/question/image`, formData)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new QuestionRepository();\r\n\r\n"]},"metadata":{},"sourceType":"module"}